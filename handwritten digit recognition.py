# -*- coding: utf-8 -*-
"""image classification_v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B3AYK7FEjMAd3QR4O3u7nuOmKcj-2U2V
"""

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import datasets, layers, models

# (training_images, training_labels),(testing_images, testing_labels) = datasets.mnist.load_data()
#
# training_images, testing_images = training_images/255, testing_images/255 #normalize the data
#
# #class_names = ['Plane','Car','Bird','Cat','Deer','Dog','Frog','Horse','Ship','Truck']
#
# for i in range(16):
#   plt.subplot(4,4,i+1) #4x4 grid
#   plt.xticks([]) #no cordnates system
#   plt.yticks([])
#   plt.imshow(training_images[i],cmap=plt.cm.binary)
#  # plt.xlabel(class_names[training_labels[i][0]])
# plt.show()
#
# # #Reduce the data size for time purposes
# # training_images = training_images[:20000]
# # training_labels = training_labels[:20000]
# # testing_images = testing_images[:4000]
# # testing_labels = testing_labels[:4000]
# len(training_images)
#
# #MODEL
# model = models.Sequential()
# model.add(layers.Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)))
# model.add(layers.MaxPooling2D((2,2)))
# model.add(layers.Conv2D(64,(3,3),activation='relu'))
# model.add(layers.MaxPooling2D((2,2)))
# model.add(layers.Conv2D(64,(3,3),activation='relu'))
# model.add(layers.Flatten())
# model.add(layers.Dense(64,activation='relu'))
# model.add(layers.Dense(10,activation='softmax'))
#
# model.compile(optimizer='adam', loss ='sparse_categorical_crossentropy',metrics=['accuracy'])
#
# model.fit(training_images,training_labels, epochs=10,validation_data=(testing_images,testing_labels))
#
# loss, accuracy = model.evaluate(testing_images,testing_labels)
#
# model.save('image_classifier.model')

from keras.models import load_model

loaded_model = load_model('image_classifier.model')

img = cv.imread('5.jpg')
# img = cv.cvtColor(img,cv.COLOR_BGR2RGB)
plt.imshow(img,cmap=plt.cm.binary)

# from skimage.transform import resize

# # Resize the image to match the model's input shape
# resized_img = resize(img, (32, 32, 3), mode='constant', anti_aliasing=True)
# plt.imshow(resized_img,cmap=plt.cm.binary)
# # Now you can predict using the resized image
img = cv.imread('5.jpg', cv.IMREAD_GRAYSCALE)  # Read as grayscale
img_resized = cv.resize(img, (28, 28))  # Resize to (28, 28)
img_normalized = img_resized / 255.0  # Normalize pixel values

# Expand dimensions to match the model's input shape (None, 28, 28, 1)
input_image = np.expand_dims(img_normalized, axis=-1)
input_image = np.expand_dims(input_image, axis=0)

# Predict using the loaded model
prediction = loaded_model.predict(input_image)
index = np.argmax(prediction)

print(f'Prediction is {index}')

